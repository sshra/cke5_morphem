!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.CKEditor5=n():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.morphem=n())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/morphem/src/command.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MorphemCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./js/ckeditor5_plugins/morphem/src/utils.js\");\n/**\n * @file\n * Defines the Command plugin.\n */\n\n\n\n\n/**\n * The morphem command.\n *\n * @extends module:core/command~Command\n */\nclass MorphemCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    // Toolbar button is always enabled.\n    this.isEnabled = true;\n\n    // Init the empty command value.\n    this.value = null;\n\n    // Find the element in the selection.\n    const { selection } = this.editor.model.document;\n    const El = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.findElement)(selection, 'morphem');\n    if (!El) {\n      return;\n    }\n\n    // Populate command value.\n    this.value = {};\n\n    // Process attributes\n    for (const [attrKey, attrValue] of El.getAttributes()) {\n      this.value[attrKey] = attrValue;\n    }\n\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  execute(values) {\n    const { model } = this.editor;\n\n    model.change((writer) => {\n      // Find an existing bButton if it is being edited.\n\n      const selection = model.document.selection;\n      const position = selection.getFirstPosition();\n\n      if (position.parent.name == 'morphem') {\n        writer.remove(position.parent);\n      }\n\n      // Create a new button.\n      const El = writer.createElement('morphem');\n      // Editing the model element and its children to match the form values.\n      this._editElement(writer, El, values);\n      // Insert a new button.\n      model.insertContent(El);\n    });\n  }\n\n  /**\n   * (Re)create a bButton element using the new values.\n   *\n   * While editing, removes child elements, recreates them\n   * and appends in a proper order.\n   *\n   * @param {Writer} writer\n   *   Model writer.\n   * @param {module:engine/model/element~Element} modelEl\n   *   Model element.\n   * @param {Array} values\n   *   New values.\n   *\n   * @private\n   */\n  _editElement(writer, modelEl, values) {\n    // Clear modelEl attributes.\n    writer.clearAttributes(modelEl);\n\n    // Set modelEl attributes.\n    var modelAttrs = {};\n    modelAttrs.bbLinkClass = values['bbLinkClass'];\n    modelAttrs.bbLinkHref = values['bbLinkHref'];\n    /*console.log(modelEl);\n    console.log(values);*/\n\n    const textFormatSettings = this.editor.config.get('morphem')\n\n    writer.setAttributes(modelAttrs, modelEl);\n\n    // Get modelEl children elements names.\n    const children = [];\n    Array.from(modelEl.getChildren()).forEach((el) => {\n      children.push(el.name);\n    });\n\n    writer.appendText( values.bbLinkText, modelEl );\n  }\n\n  /**\n   * Processes child text elements.\n   *\n   * @param {Writer} writer\n   *   Model writer.\n   * @param {Array} values\n   *   New values.\n   * @param {Array} children\n   *   Child elements names array.\n   * @param {module:engine/model/element~Element} modelEl\n   *   Model element.\n   * @param {string} childElName\n   *   Processed child element name.\n   *\n   * @returns {null|*}\n   *   Child element to append to modelEl, or null.\n   *\n   * @private\n   */\n  _processChildTextEl(writer, values, children, modelEl, childElName) {\n\n    const childEl = this._processChildElement(\n      writer,\n      values[childElName],\n      children,\n      modelEl,\n      childElName\n    );\n\n    if (childEl) {\n      // Remove existing text if any.\n      while (childEl.childCount) {\n        const textNode = childEl.getChild(childEl.childCount - 1);\n        if (textNode) {\n          writer.remove(textNode);\n        }\n      }\n\n      // Set new text.\n      writer.appendText( values[childElName], childEl );\n      return childEl;\n    }\n\n    return null;\n  }\n\n  /**\n   * Processes child attribute elements.\n   *\n   * @param {Writer} writer\n   *   Model writer.\n   * @param {Array} values\n   *   New values.\n   * @param {Array} children\n   *   Child elements names array.\n   * @param {module:engine/model/element~Element} modelEl\n   *   Model element.\n   * @param {string} childElName\n   *   Processed child element name.\n   *\n   * @returns {null|*}\n   *   Child element to append to modelEl, or null.\n   *\n   * @private\n   */\n  _processChildAttrEl(writer, values, children, modelEl, childElName) {\n\n    const childEl = this._processChildElement(\n      writer,\n      values[childElName],\n      children,\n      modelEl,\n      childElName\n    );\n\n    if (childEl) {\n      return childEl;\n    }\n\n    return null;\n  }\n\n  /**\n   * Processes any child element.\n   *\n   * @param {Writer} writer\n   *   Model writer.\n   * @param {string} value\n   *   New values.\n   * @param {Array} children\n   *   Child elements names array.\n   * @param {module:engine/model/element~Element} modelEl\n   *   Model element.\n   * @param {string} childElName\n   *   Processed child element name.\n   *\n   * @returns {null|*}\n   *   Child element to append to modelEl, or null.\n   *\n   * @private\n   */\n\n  _processChildElement (writer, value, children, modelEl, childElName) {\n\n    // Define an operation.\n    const create = value && !children.includes(childElName);\n    const edit = value && children.includes(childElName);\n    const remove = !value && children.includes(childElName);\n\n    var childEl = null;\n\n    if (create) {\n      childEl = writer.createElement(childElName, { value });\n    } else if (edit || remove) {\n      // Get updated children list to get the correct index.\n      let childrenUpdated = [];\n      Array.from(modelEl.getChildren()).forEach((el) => {\n        childrenUpdated.push(el.name);\n      });\n\n      // Find child element;\n      var childElIndex = childrenUpdated.indexOf(childElName);\n      childEl = modelEl.getChild(childElIndex);\n    }\n\n    // Remove now and re-add later if needed\n    // to comply with the child elements order.\n    if (children.includes(childElName) && childEl) {\n      writer.remove(childEl);\n    }\n\n    if (remove) {\n      return null;\n    } else {\n      return childEl;\n    }\n\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.morphem/./js/ckeditor5_plugins/morphem/src/command.js?")},"./js/ckeditor5_plugins/morphem/src/editing.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MorphemEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _command__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./command */ \"./js/ckeditor5_plugins/morphem/src/command.js\");\n/**\n * @file\n * Defines the Editing plugin.\n */\n\n/**\n * @module morphem/MorphemEditing\n */\n\n\n\n\n/**\n * The editing feature.\n *\n * It introduces the 'morphem' element in the model.\n *\n * @extends module:core/plugin~Plugin\n */\nclass MorphemEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n\n    const editor = this.editor;\n\n    // Attaching the command to the editor.\n    editor.commands.add(\n      'morphem',\n      new _command__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.editor),\n    );\n\n    editor.model.document.on('change:data', () => {\n      this._removeEmptySpans(editor, editor.model.document.getRoot());\n    });\n  }\n\n  /**\n   * Remove empty span containers\n   * @param {CKEditor object} editor\n   * @param {Element object} element\n   */\n  _removeEmptySpans(editor, element) {\n    const spans = element.getChildren();\n\n    spans.forEach(span => {\n      if (span.is('element', 'morphem') && !span.childCount) {\n        editor.model.change(writer => {\n          writer.remove(span);\n        });\n      } else if (span.is('element')) {\n        this._removeEmptySpans(editor, span);\n      }\n    });\n  }\n\n  /**\n   * Registers schema.\n   *\n   * @private\n   */\n  _defineSchema() {\n    const schema = this.editor.model.schema;\n    const textFormatSettings = this.editor.config.get('morphem')\n\n    // parent element.\n    schema.register('morphem', {\n      allowIn: [ 'paragraph' ],\n      inheritAllFrom: '$inlineObject',\n\n      isInline: true,\n      isObject: false,\n      isSelectable: true,\n\n      allowAttributes: [\n        'modelClass',\n      ],\n      allowChildren: [\n        '$text',\n        'morphemBase',\n        'morphemEnding',\n        'morphemBasePart', // root, suffix, prefix\n      ],\n    });\n  }\n\n  /**\n   * Defines converters.\n   */\n  _defineConverters() {\n    const {conversion} = this.editor;\n    const textFormatSettings = this.editor.config.get('morphem')\n\n    // bButton. View -> Model.\n    conversion.for('upcast').elementToElement({\n      view: {\n        name: 'span',\n        classes: [ textFormatSettings.morphemClass ],\n        attributes: {\n          ['class']: true,\n        }\n      },\n      converterPriority: 'highest',\n      model: (viewElement, conversionApi ) => {\n        // Do not convert if the link does not have the 'btn' class.\n        let classes = viewElement.getAttribute('class');\n        if (!classes) {\n           return null;\n        }\n\n        var attrs = {\n          modelClass: classes,\n        };\n\n        return conversionApi.writer.createElement( 'morphem', attrs );\n      },\n    });\n\n\n    // Morphem. Model -> View.\n    conversion.for('downcast').elementToElement({\n      model: 'morphem',\n      view: (modelElement, { writer }) => {\n        let htmlAttrs = {\n          'class': modelElement.getAttribute('modelClass'),\n        };\n        return writer.createContainerElement('span', htmlAttrs );\n      }\n    });\n\n\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.morphem/./js/ckeditor5_plugins/morphem/src/editing.js?")},"./js/ckeditor5_plugins/morphem/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _editing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editing */ "./js/ckeditor5_plugins/morphem/src/editing.js");\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui */ "./js/ckeditor5_plugins/morphem/src/ui.js");\n/**\n * @file\n * Defines the Morphem plugin.\n */\n\n/**\n * @module morphem/Morphem\n */\n\n\n\n\n\n/**\n * The Morphem plugin.\n *\n * This is a "glue" plugin that loads\n *\n * @extends module:core/plugin~Plugin\n */\nclass Morphem extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\n  /**\n   * @inheritdoc\n   */\n  static get requires() {\n    return [_editing__WEBPACK_IMPORTED_MODULE_1__["default"], _ui__WEBPACK_IMPORTED_MODULE_2__["default"]];\n  }\n\n  /**\n   * @inheritdoc\n   */\n  static get pluginName() {\n    return \'plugMorphem\';\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  Morphem,\n});\n\n\n//# sourceURL=webpack://CKEditor5.morphem/./js/ckeditor5_plugins/morphem/src/index.js?')},"./js/ckeditor5_plugins/morphem/src/ui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MorphemUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_bb_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../icons/bb.svg */ \"./js/icons/bb.svg\");\n/**\n * @file\n * Defines the UI plugin.\n */\n\n/**\n * @module morphem/MorphemUI\n */\n\n\n\n\n\n/**\n * The UI plugin. It introduces the `'bButton'` button and the forms.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nclass MorphemUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ ContextualBalloon ];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  init() {\n    this._addToolbarButton();\n//    this._handleSelection();\n  }\n\n  /**\n   * Adds the toolbar button.\n   *\n   * @private\n   */\n  _addToolbarButton() {\n    const editor = this.editor;\n\n    editor.ui.componentFactory.add('morphem', (locale) => {\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Morphem Button'),\n        icon: _icons_bb_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        tooltip: true\n      });\n\n      // Bind button to the command.\n      // The state on the button depends on the command values.\n      const command = editor.commands.get('morphem');\n      buttonView.bind( 'isEnabled' ).to( command, 'isEnabled' );\n      buttonView.bind( 'isOn' ).to( command, 'value', value => !!value );\n\n      // Execute the command when the button is clicked.\n      this.listenTo(buttonView, 'execute', () => {\n\n        let values = {\n          modelClass:  textFormatSettings.morphemClass,\n        };\n        this.editor.execute('morphem', values);\n\n      });\n\n      return buttonView;\n    });\n  }\n\n  /**\n   * Handles the selection specific cases (right before or after the element).\n   *\n   * @private\n   */\n  _handleSelection() {\n    const editor = this.editor;\n\n    this.listenTo(editor.editing.view.document, 'selectionChange', (eventInfo, eventData) => {\n      const selection = editor.model.document.selection;\n\n      let el = selection.getSelectedElement() ?? selection.getFirstRange().getCommonAncestor();\n\n      if (el.name !== \"morphem\") {\n        this._hideUI();\n      }\n\n    });\n  }\n\n\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.morphem/./js/ckeditor5_plugins/morphem/src/ui.js?")},"./js/ckeditor5_plugins/morphem/src/utils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findElement: () => (/* binding */ findElement)\n/* harmony export */ });\n/**\n * @file\n * Defines a helper class and functions.\n */\n\n/**\n * Finds a closest element of a model name in a given selection.\n *\n * @param {module:engine/model/selection~Selection} modelSelection\n *   Model selection.\n *\n * @param {string} modelName\n *   Model name of a searched element.\n *\n * @returns {module:engine/model/element~Element}\n *   Found element.\n */\nfunction findElement(modelSelection, modelName) {\n  const selectedElement = modelSelection.getSelectedElement();\n  if (selectedElement && selectedElement.name == modelName) {\n    return selectedElement;\n  } else {\n    return modelSelection\n      .getFirstRange()\n      .getCommonAncestor()\n      .findAncestor(modelName);\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.morphem/./js/ckeditor5_plugins/morphem/src/utils.js?")},"./js/icons/bb.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<svg version=\\"1.1\\" id=\\"Layer_1\\" xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" x=\\"0px\\" y=\\"0px\\"\\n\\t viewBox=\\"0 0 31 19\\" style=\\"enable-background:new 0 0 31 19;\\" xml:space=\\"preserve\\">\\n<rect x=\\"0.5\\" y=\\"0.5\\" style=\\"fill:#CECECE;stroke:#000000;stroke-miterlimit:10;\\" width=\\"30\\" height=\\"18\\"/>\\n<text transform=\\"matrix(1 0 0 1 9.0665 13.7686)\\" style=\\"font-family:\'MyriadPro-Regular\'; font-size:12px;\\">BB</text>\\n</svg>\\n");\n\n//# sourceURL=webpack://CKEditor5.morphem/./js/icons/bb.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.morphem/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.morphem/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/morphem/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));